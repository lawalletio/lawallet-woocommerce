<?

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

require_once(WC_LND_PLUGIN_PATH . '/admin/includes/LND_Settings_Page_Generator.php');
require_once(WC_LND_PLUGIN_PATH . '/includes/ChannelManager.php');

class LND_WC_Settings_LND extends LND_Settings_Page_Generator {
    public static $prefix = WC_LND_NAME . '_lnd_config';
    protected static $structure = null;
    protected static $instance = null;

    protected $lndCon = false;
    protected $notice = null;

    public function __construct() {
        $this->title = __('LND Settings', 'lawallet-woocommerce');

        self::set_structure();
        parent::__construct();

        $this->lndCon = LndWrapper::instance();
        $this->lndCon->setCredentials (LND_WC_Helpers::generateEndpoint($this->settings), WC_LND_MACAROON_FILE, WC_LND_TLS_FILE);
        $this->channelManager = ChannelManager::instance();
        $this->channelManager->setLND($this->lndCon);

        if (!empty($_FILES[static::$prefix]['name']['tls'])) {
          $this->upload_tls();
        }

        if (!empty($_FILES[static::$prefix]['name']['macaroon'])) {
          $this->upload_macaroon();
        }

        if (isset($_GET['tab']) && $_GET['tab']==='withdraw' && isset($_POST['submit'])) {
          $this->handle_withdraw();
        }
    }


    /**
     * Get settings structure
     *
     * @access public
     * @return array
     */
    public static function set_structure() {
        // Define main settings
        static::$structure = array(
            'settings' => array(
                'title' => __('Config', 'lawallet-woocommerce'),
                'children' => array(
                    'general_settings' => array(
                        'title' => __('Server Config', 'lawallet-woocommerce'),
                        'children' => [
                            'host' => array(
                                'title'     => __('Host', 'lawallet-woocommerce'),
                                'type'      => 'text',
                                'default'   => __('localhost', 'lawallet-woocommerce'),
                                'required'  => true,
                                'hint'      => __('LND host address, you can use <b>localhost</b>.', 'lawallet-woocommerce'),
                            ),
                            'port' => array(
                                'title'     => __('Port', 'lawallet-woocommerce'),
                                'type'      => 'text',
                                'default'   => 8080,
                                'required'  => true,
                                'hint'      => __('LND port, must be the same as <b>restlisten</b> value from lnd.conf. Please type just the port number.', 'lawallet-woocommerce'),
                            ),
                            'ssl' => array(
                                'title'     => __('SSL Enabled', 'lawallet-woocommerce'),
                                'type'      => 'checkbox',
                                'default'   => '1',
                                'hint'      => __('You need to upload tls.cert below.', 'lawallet-woocommerce'),
                            ),
                        ],
                    ),
                    'credentials' => array(
                        'title' => __('Credentials', 'lawallet-woocommerce'),
                        'children' => array(
                          'tls' => array(
                              'title'     => __('TLS File', 'lawallet-woocommerce'),
                              'type'      => 'file',
                              'required'  => false,
                              'hint'      => __('tls.cert file generated by LND.', 'lawallet-woocommerce'),
                          ),
                          'macaroon' => array(
                              'title'     => __('Macaroon File', 'lawallet-woocommerce'),
                              'type'      => 'file',
                              'required'  => false,
                              'hint'      => __( 'Macaroon file, must have invoice permissions at least', 'lawallet-woocommerce' ),
                          ),
                        ),
                    ),
                ),
            ),
            'info' => array(
                'title' => __('Server Info', 'lawallet-woocommerce'),
                'template' => 'info',
                'children' => [],
            ),
            'channels' => array(
                'title' => __('Channels', 'lawallet-woocommerce'),
                'template' => 'channels',
                'children' => [],
            ),
            'withdraw' => array(
                'title' => __('Withdraw', 'lawallet-woocommerce'),
                'template' => 'withdraw',
                'children' => [],
            ),
        );
        return self::$structure;
    }

    /**
     * Upload Macaroon file
     *
     * @access public
     * @return void
     */
    public function upload_macaroon() {
        $this->upload_file('macaroon', WC_LND_MACAROON_FILE, ['macaroon']);
    }

    /**
     * Upload TLS file
     *
     * @access public
     * @return void
     */
    public function upload_tls() {
        $this->upload_file('tls', WC_LND_TLS_FILE, ['cert']);
    }

    public function print_template_debug() {
      // Print settings page content
      include WC_LND_ADMIN_PATH . '/views/lnd/debug.php';
    }

    public function print_template_info() {
      try {
        $info = $this->lndCon->getInfo();
      } catch (\Exception $e) {
        $message = $e->getMessage();
        // Print settings error content
        include WC_LND_ADMIN_PATH . '/views/error.php';
        return;
      }

      include WC_LND_ADMIN_PATH . '/views/lnd/info.php';
    }


    public function print_template_channels() {
      $ticker = TickerManager::instance()->getTicker();
      try {
        $balance = $this->channelManager->getBalance();
        $channels = $this->channelManager->getChannels();
      } catch (\Exception $e) {
        $message = $e->getMessage();
        // Print settings error content
        include WC_LND_ADMIN_PATH . '/views/error.php';
        return;
      }

      include WC_LND_ADMIN_PATH . '/views/lnd/channels.php';
    }

    /**
     * Prints withdraw template
     */
    public function print_template_withdraw() {
      try {
        $ticker = TickerManager::instance()->getTicker();
        $balance = $this->channelManager->getBalance();
      } catch (\Exception $e) {
        $message = $e->getMessage();
        // Print settings error content
        include WC_LND_ADMIN_PATH . '/views/error.php';
        return;
      }

      include WC_LND_ADMIN_PATH . '/views/lnd/withdraw.php';
    }

    /**
     * Print wp notice for succesful withdrawal
     */
    public function notice_withdraw_success() {
      $amount = $this->notice->payment_route->total_amt;
      $fees = $this->notice->payment_route->total_fees;
      ?>
      <div class="notice notice-success">
        <h3><?=__('Invoice succesfully paid!', 'lawallet-woocommerce')?></h3>
        <p><?=sprintf(__( 'The amount of %s sats has successfully been transferred.', 'lawallet-woocommerce' ), '<b>' . $amount . '</b>'); ?></p>
        <p><?=sprintf(__( 'Total %s sats paid in fees.', 'lawallet-woocommerce' ), '<b>' . $fees . '</b>'); ?></p>
      </div>
      <?
    }

    /**
     * Print wp notice for withdrawal error
     */
    public function notice_withdraw_error() {
      ?>
      <div class="notice notice-error">
        <h3><?=__('Error trying to pay invoice', 'lawallet-woocommerce')?></h3>
        <p><?=$this->notice->getMessage(); ?></p>
      </div>
      <?
    }

    /**
     * Handle $_POST withdraw
     */
    public function handle_withdraw() {
      $pay_req = $_POST['pay_req'];
      try {
        $this->notice = $this->lndCon->payInvoice($pay_req);
        add_action( 'admin_notices', [$this, 'notice_withdraw_success'] );
      } catch (\Exception $e) {
        $this->notice = $e;
        add_action( 'admin_notices', [$this, 'notice_withdraw_error'] );
      }
    }
}
LND_WC_Settings_LND::instance();
