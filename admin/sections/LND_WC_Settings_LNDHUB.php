<?

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

require_once(WC_LND_PLUGIN_PATH . '/admin/includes/LND_Settings_Page_Generator.php');
require_once(WC_LND_PLUGIN_PATH . '/includes/LndHub.php');

class LND_WC_Settings_LNDHUB extends LND_Settings_Page_Generator {
    public static $prefix = WC_LND_NAME . '_lndhub_config';
    protected static $structure = null;
    protected static $instance = null;

    protected $notice = null;
    protected $lndhubCon = false;

    public function __construct() {
        $this->title = __('LaWallet Settings', 'lawallet-woocommerce');

        static::set_structure();
        parent::__construct();

        try {
          $access = $this->getToken();

          $this->lndhubCon = LndHub::instance();
          $this->lndhubCon->setCredentials($this->getEndpoint($this->settings), $this->settings['userID'], $this->settings['password']);
          $this->lndhubCon->setAccessToken($access);
          $this->lndhubCon->setStoreTokenFunc([$this, 'setToken']);

          if (isset($_POST[static::$prefix])) {
            $this->loadConfig($_POST[static::$prefix]);
          }
        } catch (\Exception $e) {
          add_settings_error(
              static::$prefix,
              static::$prefix . '_error',
              $e->getMessage(),
              'error'
          );
        }
    }


    /**
     * Get settings structure
     *
     * @access public
     * @return array
     */
    public static function set_structure() {
        // Define main settings
        static::$structure = [
            'settings' => [
                'title' => __('Config', 'lawallet-woocommerce'),
                'template' => 'config',
                'children' => array(
                  'backup_settings' => array(
                        'title' => __('Backup Config', 'lawallet-woocommerce'),
                        'children' => [
                            'backup_string' => array(
                                'title'     => __('Backup String', 'lawallet-woocommerce'),
                                'type'      => 'text',
                                'placeholder' => __('Leave blank for new account on BlueWallet server', 'lawallet-woocommerce'),
                                'default'   => 'lndhub://:',
                                'hint'      => __('Backup URL by exporting wallet on BlueWallet starting with <i>lndhub://</i>. ', 'lawallet-woocommerce'),
                            ),
                        ],
                    ),
                    'general_settings' => array(
                        'title' => __('Server Config', 'lawallet-woocommerce'),
                        'children' => [
                            'host' => array(
                                'title'     => __('Host', 'lawallet-woocommerce'),
                                'type'      => 'text',
                                'default'   => __('lndhub.herokuapp.com', 'lawallet-woocommerce'),
                                'required'  => true,
                                'hint'      => __('LndHub host address, you can use <b>localhost</b>.', 'lawallet-woocommerce'),
                            ),
                            'port' => array(
                                'title'     => __('Port', 'lawallet-woocommerce'),
                                'type'      => 'text',
                                'default'   => 443,
                                'required'  => true,
                                'hint'      => __('LndHub port, default is 3000', 'lawallet-woocommerce'),
                            ),
                            'ssl' => array(
                                'title'     => __('SSL Enabled', 'lawallet-woocommerce'),
                                'type'      => 'checkbox',
                                'default'   => '1',
                                'hint'      => __('Uses HTTPS?', 'lawallet-woocommerce'),
                            ),
                        ],
                    ),
                    'credential_settings' => array(
                        'title' => __('Authentication Credentials', 'lawallet-woocommerce'),
                        'children' => [
                            'userID' => array(
                                'title'     => __('User ID', 'lawallet-woocommerce'),
                                'type'      => 'text',
                                'placeholder' => __('Leave it blank to generate new one from server', 'lawallet-woocommerce'),
                                'hint'      => __('User ID', 'lawallet-woocommerce') . ' ' . __('generated by lndhub, received when creating account first time or from backup string.', 'lawallet-woocommerce'),
                            ),
                            'password' => array(
                                'title'     => __('Password', 'lawallet-woocommerce'),
                                'type'      => 'text',
                                'placeholder' => __('Leave it blank to generate new one from server', 'lawallet-woocommerce'),
                                'hint'      => __('Password', 'lawallet-woocommerce') . ' ' . __('generated by lndhub, received when creating account first time or from backup string.', 'lawallet-woocommerce'),
                            ),
                        ],
                    ),
                ),
            ],
            'info' => array(
                'title' => __('Server Info', 'lawallet-woocommerce'),
                'template' => 'info',
                'children' => [],
            ),
            'withdraw' => array(
                'title' => __('Withdraw', 'lawallet-woocommerce'),
                'template' => 'withdraw',
                'children' => [],
            ),
        ];
        return static::$structure;
    }

    public function print_template_info() {
      try {
        $this->lndhubCon->authenticate();

        $info = $this->lndhubCon->getInfo();

        include WC_LND_ADMIN_PATH . '/views/lndhub/info.php';
      } catch (\Exception $e) {
        $message = $e->getMessage();
        // Print settings error content
        include WC_LND_ADMIN_PATH . '/views/error.php';
        return;
      }
    }

    public function print_template_dashboard() {
      $ticker = TickerManager::instance()->getTicker();
      include WC_LND_ADMIN_PATH . '/views/lndhub/dashboard.php';
    }

    public function print_template_config() {
      // Get current tab
      $current_tab = static::get_tab();

      include WC_LND_ADMIN_PATH . '/views/lndhub/config.php';

      // Open form container
      echo '<form method="post" action="options.php" enctype="multipart/form-data">';
      // Print settings page content
      include WC_LND_ADMIN_PATH . '/views/fields.php';

      // Close form container
      echo '</form>';
    }

    public function getEndpoint($settings) {
      $protocol = $settings['ssl'] ? 'https' : 'http';
      $host = $settings['host'] ? $settings['host'] : '';
      $port = $settings['port'] ? $settings['port'] : ($protocol == 'https' ? '443' : '80');
      return $protocol . '://' . $host . ':' . $port;
    }

    private function loadConfig($settings) {
      if (!empty($_POST[static::$prefix]['userID']) || !empty($_POST[static::$prefix]['password'])) {
        return false;
      }
      $settings['ssl'] = isset($settings['ssl']) && $settings['ssl'];
      $this->lndhubCon->setCredentials($this->getEndpoint($settings));

      if (empty($settings['userID']) && empty($settings['userID'])) {
        $auth = $this->lndhubCon->createUser();
      }
      $_POST[static::$prefix]['userID'] = $auth->userID;
      $_POST[static::$prefix]['password'] = $auth->password;
    }

    private function getToken() {
      return get_option(static::$prefix . '_token');
    }

    public function setToken($data) {
      //$data = $data !== null ? $data : $this->getEmptyToken();
      update_option(static::$prefix . '_token', $data);
      return $data;
    }

    /**
     * Prints withdraw template
     */
    public function print_template_withdraw() {
      try {
        $ticker = TickerManager::instance()->getTicker();
        $balance = $this->lndhubCon->getBalance();
      } catch (\Exception $e) {
        $message = $e->getMessage();
        // Print settings error content
        include WC_LND_ADMIN_PATH . '/views/error.php';
        return;
      }

      include WC_LND_ADMIN_PATH . '/views/lndhub/withdraw.php';
    }

    /**
     * Print wp notice for succesful withdrawal
     */
    public function notice_withdraw_success() {
      $amount = $this->notice->payment_route->total_amt;
      $fees = $this->notice->payment_route->total_fees;
      ?>
      <div class="notice notice-success">
        <h3><?=__('Invoice succesfully paid!', 'lawallet-woocommerce')?></h3>
        <p><?=sprintf(__( 'The amount of %s sats has successfully been transferred.', 'lawallet-woocommerce' ), '<b>' . $amount . '</b>'); ?></p>
        <p><?=sprintf(__( 'Total %s sats paid in fees.', 'lawallet-woocommerce' ), '<b>' . $fees . '</b>'); ?></p>
      </div>
      <?
    }

    /**
     * Print wp notice for withdrawal error
     */
    public function notice_withdraw_error() {
      ?>
      <div class="notice notice-error">
        <h3><?=__('Error trying to pay invoice', 'lawallet-woocommerce')?></h3>
        <p><?=$this->notice->getMessage(); ?></p>
      </div>
      <?
    }
    
    /**
     * Handle $_POST withdraw
     */
    public function handle_withdraw() {
      $pay_req = $_POST['pay_req'];
      try {
        $this->notice = $this->lndCon->payInvoice($pay_req);
        add_action( 'admin_notices', [$this, 'notice_withdraw_success'] );
      } catch (\Exception $e) {
        $this->notice = $e;
        add_action( 'admin_notices', [$this, 'notice_withdraw_error'] );
      }
    }
}

LND_WC_Settings_LNDHUB::instance();
